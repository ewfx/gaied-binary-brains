from transformers import BertTokenizer, BertForSequenceClassification
import torch
import pytesseract
from pdfminer.high_level import extract_text
from docx import Document
from PIL import Image
import json
import os

# Initialize BERT model and tokenizer for text classification
model = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=6)  # E.g., 6 labels: spam, request type, sub request type
tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')

# Function to extract text from PDF attachments
def extract_pdf_text(pdf_path):
    text = extract_text(pdf_path)
    return text

# Function to extract text from DOCX attachments
def extract_docx_text(docx_path):
    doc = Document(docx_path)
    text = "\n".join([para.text for para in doc.paragraphs])
    return text

# Function to extract text from image attachments using OCR
def extract_text_from_image(image_path):
    image = Image.open(image_path)
    text = pytesseract.image_to_string(image)
    return text

# Function to classify email content and attachment, then get confidence score
def classify_email_with_attachments(email_subject, email_body, attachment_paths=[]):
    # Combine email subject and body into one text input
    email_content = email_subject + "\n" + email_body

    # Extract text from attachments
    attachment_info = {}
    for attachment_path in attachment_paths:
        _, ext = os.path.splitext(attachment_path)
        if ext.lower() == ".pdf":
            attachment_info["pdf_attachment"] = {
                "filename": attachment_path,
                "page_count": len(extract_pdf_text(attachment_path).split('\n')) // 30,  # Estimate page count
                "extracted_text": extract_pdf_text(attachment_path)
            }
            email_content += "\n" + extract_pdf_text(attachment_path)
        elif ext.lower() == ".docx":
            attachment_info["docx_attachment"] = {
                "filename": attachment_path,
                "extracted_text": extract_docx_text(attachment_path)
            }
            email_content += "\n" + extract_docx_text(attachment_path)
        elif ext.lower() in [".jpg", ".jpeg", ".png"]:
            attachment_info["image_attachment"] = {
                "filename": attachment_path,
                "image_text": extract_text_from_image(attachment_path)
            }
            email_content += "\n" + extract_text_from_image(attachment_path)
    
    # Tokenize the combined email content
    inputs = tokenizer(email_content, return_tensors="pt", truncation=True, padding=True, max_length=512)

    # Make predictions using the model
    with torch.no_grad():
        outputs = model(**inputs)
        logits = outputs.logits

    # Convert logits to probabilities using softmax
    probs = torch.nn.functional.softmax(logits, dim=-1)

    # Get predicted class and its confidence score
    predicted_class = torch.argmax(probs, dim=-1).item()
    confidence_score = probs[0][predicted_class].item()

    # Define request types and sub-request types as labels
    request_types = ['Spam', 'Loan', 'Account', 'Payment', 'Inquiry', 'Other']
    sub_request_types = ['Spam', 'Payment Issue', 'Overpayment', 'Balance Inquiry', 'Account Query', 'Other']

    # Example of assigning labels
    request_type = request_types[predicted_class % len(request_types)]
    sub_request_type = sub_request_types[predicted_class % len(sub_request_types)]

    # Fake Spam score for demonstration
    spam_score = 0.05 if predicted_class != 0 else 0.95

    # Return the extended JSON result
    result = {
        'predicted_label': request_type,
        'confidence_score': confidence_score,
        'request_type': request_type,
        'sub_request_type': sub_request_type,
        'spam_score': spam_score,
        'attachment_info': attachment_info
    }

    return json.dumps(result, indent=4)

# Example email with attachments
email_subject = "Issue with Loan Repayment"
email_body = "Dear Support, I am facing an issue with my loan repayment due to delayed payment."
attachment_paths = ["loan_statement.pdf", "invoice.jpg"]

# Classify the email with attachments and get confidence score
result = classify_email_with_attachments(email_subject, email_body, attachment_paths)
print(result)
************************

EXPECTED OUTPUT

{
    "predicted_label": "Loan",
    "confidence_score": 0.9243,
    "request_type": "Loan",
    "sub_request_type": "Payment Issue",
    "spam_score": 0.05,
    "attachment_info": {
        "pdf_attachment": {
            "filename": "loan_statement.pdf",
            "page_count": 3,
            "extracted_text": "Loan repayment details..."
        },
        "image_attachment": {
            "filename": "invoice.jpg",
            "image_text": "Invoice details extracted using OCR..."
        }
    }
}

